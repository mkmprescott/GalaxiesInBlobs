PRO fieldsampling
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------;
; fieldsampling procedure
;     Places a user-specified number of random apertures on a field (GOODS-S from 3D-HST) and keeps track of the galaxies in each aperture.
;  <describe output structure here>***********************************************************************************************************************************
;
; Uses the following:
;   FUNCTION: get_galaxies_binned
;   PROCEDURE: struct_replace_field
;   PROCEDURE: apfinder
;
;
;
;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 ; INITIAL SETUP 

   ; notify IDL of all functions used in this procedure
      FORWARD_FUNCTION get_galaxies_binned

   ; USER-DEFINED VARIABLES: 
      ap_radius_arcsec = 10.                             ; aperture radius in arcsec
      binsize = 0.5                                      ; size of magnitude bins 
      brightestmag = 22.                                 ; smallest (brightest) magnitude of galaxies we can reasonably see in our images 
      dimmestmag = 30.                                   ; biggest (faintest) magnitude of galaxies we can reasonably see in our images 
      nApertures = 10000.                                ; number of random apertures to use in field density calculation 
      hstpixelscale = 0.06                               ; arcseconds per pixel for the field, GOODS-S (I've also seen 0.128 "/px for this?)
      filename = 'HSTapertures_10arcsec_10000aps.fits'   ; name of the FITS file to be created, containing the results of this analysis


   ; define important quantities based on above user preferences
      ; the radius/radii of the aperture(s) used to calculate density:  
        ap_radius = ap_radius_arcsec/3600.             ; aperture radius in decimal degrees
        hstap_radius_pix = ap_radius_arcsec / hstpixelscale
        n_radii = n_elements(ap_radius)                ; number of aperture sizes being tested
      ; mag binning stuff:
        nbins = (dimmestmag - brightestmag + binsize)/binsize     ; the number of magnitude bins as determined from our range and binsize 

   ; read in 3D-HST field data and rename fields to be useful
      goodss = read_csv('/boomerang-data/alhall/LABoverdensity/GalaxiesInBlobs/goodss.csv')   
      struct_replace_field, goodss, 'FIELD1', goodss.FIELD1, newtag='ID'
      struct_replace_field, goodss, 'FIELD2', goodss.FIELD2, newtag='ra'
      struct_replace_field, goodss, 'FIELD3', goodss.FIELD3, newtag='dec'
      struct_replace_field, goodss, 'FIELD4', goodss.FIELD4, newtag='redmag'
      struct_replace_field, goodss, 'FIELD5', goodss.FIELD5, newtag='midmag'
      struct_replace_field, goodss, 'FIELD6', goodss.FIELD6, newtag='bluemag'   
      struct_replace_field, goodss, 'FIELD7', goodss.FIELD7, newtag='altbluemag'
      struct_replace_field, goodss, 'FIELD8', goodss.FIELD8, newtag='z'

   ; read in HST bad pixel map for random aperture analysis  
TIC 
      print, 'reading in header...'
      hsthdr =  headfits('/boomerang-data/alhall/LABoverdensity/GalaxiesInBlobs/3DHST/3DHSTimages/stacks/goodss_3dhst.v4.0.F125W_F140W_F160W_det.fits')
TOC
TIC
      print, 'reading in mask image...'
      hstmask = '/boomerang-data/alhall/LABoverdensity/GalaxiesInBlobs/3DHST/3DHSTimages/masks/GOODS-S_area.fits'
TOC
TIC
      print, 'converting mask image into bpm...'
      hstbpm = -1.*(mrdfits(hstmask,0) - 1.)      ; this is the mask image for weeding out bad pixels in 3DHST field, in the same format as our blob bpms 
TOC 
TIC 
      print, 'determining size of field image (bpm)...'
      hstsizeinfo = size(hstbpm)               ; the dimensions of the mask image in pixels 
      hstnpix_x = hstsizeinfo[1]               ; number of pixels in mask in the x direction
      hstnpix_y = hstsizeinfo[2]               ; number of pixels in mask in the y direction 
TOC 


 ; SAMPLE THE FIELD
 print, 'NOW SAMPLING THE FIELD. GOODS-S FIELD ANALYSIS:'

   ; set up a structure to contain all the random aperture information including IDs of galaxies contained in each aperture
      dummyarray = lonarr(150)       ; a dummy array that provides the framework for storing galaxy IDs, assuming no aperture contains more than 150 galaxies
      dummyarray = dummyarray - 1    ; fill the dummy array with all -1s (so that if an aperture has no galaxies, this is indicated by an array of only -1s)
      dummystruct = {aperture:0L, RA:0.0, dec:0.0, galIDs:dummyarray}     ; a dummy structure for one aperture containing aperture number, center RA & dec, and galaxy ID array 
      HSTstruct = replicate(dummystruct,nApertures)                       ; the main structure containing all random aperture information
     
   ; make an aperture image where everything inside the aperture has a value of 1 and everything outside (just the edge stuff) has a value of 0:
      dist_ellipse, hstdim, [ 2.*hstap_radius_pix[r], 2.*hstap_radius_pix[r] ], hstap_radius_pix[r], hstap_radius_pix[r], 1.,0.
      hstdim[where(hstdim LT ap_radius_pix[r], hstntotalpix)] = 1.      ; note that hstntotalpix is defined in this line as well!
      hstdim[where(hstdim GE ap_radius_pix[r])] = 0.

   ; keep track of how many apertures are made in total
      hstap_count = 0 

TIC
   ; now place random apertures and count galaxies inside them 
      FOR ap=0, nApertures-1 DO BEGIN       ; for the specified number of apertures
        ; find a good aperture to use: 
           apfinder, hstnpix_x, hstnpix_y, hstap_radius_pix[r], ap_radius[r], hstdim, hstbpm, hsthdr, hstap_count, hstap_x, hstap_y, hstnbadpix, hstntotalpix, hstap_ra, hstap_dec 
        ; calculate fraction of aperture that is good pixels:
           hstap_area_weight = (float(hstntotalpix) - float(hstnbadpix)) / float(hstntotalpix) 
        ; convert pixels to sky coords 
           xyad, hsthdr, hstap_x, hstap_y, hstap_ra, hstap_dec    ; for HST field
        ; add aperture number, RA, and dec to structure for this aperture
           HSTstruct(ap).aperture = ap+1
           HSTstruct(ap).RA = hstap_ra
           HSTstruct(ap).dec = hstap_dec
        ; create array of galaxy IDs for each aperture - this will hold all the galaxy IDs
           aparray = fltarr(1)-1.    ; for now, it just contains a single entry, a dummy -1 
        ; go through all magnitude bins and add galaxies to aparray
           FOR mag=brightestmag, dimmestmag, binsize DO BEGIN  
             hst_galaxies_binned_indices = get_galaxies_binned(hstap_ra, hstap_dec, ap_radius[r], goodss, mag, mag+binsize, goodss.(3))    ; get catalog indices of the galaxies in the aperture
             IF (hst_galaxies_binned_indices[0] GT -1.0) THEN BEGIN                 ; if there are any galaxies in this bin in this aperture, do the following
               hst_galaxies_binned = goodss.ID[hst_galaxies_binned_indices]         ; turn catalog indices into actual ID numbers
               aparray = [aparray, hst_galaxies_binned]                             ; add galaxy IDs onto aparray
             ENDIF   ; if there are any galaxies in this bin at all 
           ENDFOR     ; all magnitude bins 
        ; now get rid of the dummy -1 at the beginning of aparray
           ap_ngals = n_elements(aparray)      ; total number of galaxies in the aperture plus one (the dummy -1)
           IF (ap_ngals GT 1) THEN BEGIN       ; if there are any galaxies at all in this aperture, then do the following
             lastindex = ap_ngals - 1                  ; define the last index of aparray
             arrayforstruct = aparray[1:lastindex]     ; take the dummy -1 out of aparray in order to get just galaxy IDs for the structure
             newlastindex = lastindex-1                ; since one element was removed from the array, there's a different last index now
             HSTstruct(ap).galIDs[0:newlastindex] = arrayforstruct       ; put the galaxy IDs into the structure for this aperture
           ENDIF    ; the aperture contained at least one galaxy
      ENDFOR    ; all the random apertures 
      help, HSTstruct   ; a test to make sure the completed main structure looks ok
TOC


   ; last step: write the completed main structure to a FITS file
TIC
      mwrfits, HSTstruct, filename, /create
TOC
TIC
      testHSTstruct = mrdfits(filename,1)     ; read the newly-created FITS file back in as a test 
      help, testHSTstruct                     ; check to make sure the read-in structure looks the same as the output one
TOC


END        ; end of fieldsampling procedure









  FUNCTION get_galaxies_binned, ra, dec, radius, data, brightmag, dimmag, datamags                                                                                       
  ;-------------------------------------------------------------------------------------------------------------------------------------------------;                     
  ; get_galaxies_binned function                                                                                                                    ;                     
  ; INPUTS: ra, dec - the RA and declination of a point at which to place an aperture                                                               ;                     
  ;         radius - the radius of the aperture placed at the given coordinates                                                                     ;                     
  ;         data - a SExtractor catalog of sources which contains each source's RA, declination, magnitude, a flag indicating what type of object   ;********************************                     
  ;                  it is, and a flag indicating whether or not there are any bad pixels in the source in the original image                       ;                     
  ;         brightmag - the lower bound (brightest magnitude) of a magnitude range (bin)                                                            ;                     
  ;         dimmag - the upper bound (faintest magnitude) of a magnitude range (bin)                                                                ;                     
  ; OUTPUT: galaxies_in_aperture - the index numbers of the galaxies in the data catalog which are located within the specified aperture and have   ;                     
  ;                                  magnitudes between brightmag and dimmag                                                                        ;                     
  ; NOTES: The output is found by determining the distance between the aperture's center and each source, then requiring that distance to be less   ;                     
  ;           than the radius of the aperture, filtering out all objects which are marked as stars in the catalog, filtering out all objects        ;                     
  ;           with flags that indicate that they lie in areas of bad pixels, and filtering out all objects with magnitudes outside the range set    ;                     
  ;           by brightmag and dimmag. This ensures that only real sources that are galaxies with specific magnitudes are returned.                 ;                     
  ;-------------------------------------------------------------------------------------------------------------------------------------------------;                     
    distance = sqrt(  ( (ra - data.ra) * cos(dec*!dPI/180.) )^2. + (dec - data.dec)^2. )         ; Pythagorean theorem                                                    
    ; the source:                                                                                                                                                         
    ;  - has to be contained within the aperture, and                                                                                                                                                                                                                                       ;
    ;  - has to have a magnitude between brightmag and dimmag                                                                                                           
    galaxies_in_aperture = WHERE (((distance LT radius) AND (datamags GE brightmag) AND (datamags LT dimmag)), n_galaxies)                                                    
    RETURN, galaxies_in_aperture                                                                                                                                         
  END    









  PRO apfinder, npix_x, npix_y, ap_radius_pix, ap_radius, dim, bpm, hdr, ap_count, ap_x, ap_y, nbadpix, ntotalpix, ap_ra, ap_dec, blobcoords=blobcoords      
; blobcoords is a 2D array with rows RA & dec and columns of however many blobs we want to avoid    
  ;-------------------------------------------------------------------------------------------------------------------------------------------------;                     
  ; apfinder procedure                                                                                                                              ;                     
  ;   description                                                                                                                                   ;****************                     
  ; INPUTS: etc                                                                                                                                     ;                     
  ;         etc                                                                                                                                     ;                     
  ; NOTE:                                                                                                                                           ;                      
  ;-------------------------------------------------------------------------------------------------------------------------------------------------;              
    ; SETUP
       ; We only want apertures with good pixels, so need to set up a WHILE loop that generates apertures until a good one comes up        
       repeatflag = 0.       ; this will ensure that apertures don't get wasted on areas with only bad pixels                                                                
       ap_count++            ; start counting the total number of apertures (including bad ones) generated        

    ; Make random apertures until a usable one comes up                                                                                                                                       
    WHILE (repeatflag EQ 0.) DO BEGIN 
                                                                                                                                   
      ; make a random aperture:                                                                                                                                           
         seed = !NULL      ; reset random seed to prevent corrupting random number sequence
         ap_x = floor(ap_radius_pix + (double(npix_x)-2.*ap_radius_pix)*randomu(seed))          ; generate a random x coordinate for aperture center         
         seed = !NULL      ; reset random seed to prevent corrupting random number sequence
         ap_y = floor(ap_radius_pix + (double(npix_y)-2.*ap_radius_pix)*randomu(seed))          ; generate a random y coordinate for aperture center      
         print, ap_x, ap_y      ; check to make sure the generated coordinates are reasonable and not repeats

      ; FIND BAD PIXELS:                                                                                                                                                  
         ; find corners of box into which to insert aperture image ("dim")                                                                                                           
            xlo = ap_x - floor(ap_radius_pix)      ; left edge                                                                                                                            
            xhi = ap_x + floor(ap_radius_pix)      ; right edge                                                                                                                           
            ylo = ap_y - floor(ap_radius_pix)      ; bottom edge                                                                                                                             
            yhi = ap_y + floor(ap_radius_pix)      ; top edge   
         ; make sure the box dimensions match the dimensions of the aperture image (this gets weird because of fractions of pixels                                                                   
            dimsize = size(dim)                                                                                                                                               
            IF ((xhi-xlo) NE (dimsize[1]-1.)) THEN BEGIN    ; if box & dim don't match in x size                                                                                                      
              xhi = ap_x + floor(ap_radius_pix) - 1.                                                                                                                          
            ENDIF                                                                                                                                                             
            IF ((yhi-ylo) NE (dimsize[2]-1.)) THEN BEGIN    ; if box & dim don't match in y size                                                                                                      
              yhi = ap_y + floor(ap_radius_pix) - 1.                                                                                                                          
            ENDIF                                                                                                                                                             
         ; cut out the piece of the bpm that contains this random aperture                                                                                                  
            minibpm = bpm[xlo:xhi,ylo:yhi]                                                                                                                                    
         ; multiply the aperture map by the bpm so only BAD pixels INSIDE the aperture are left (since we want to count them):                                              
            apbpm = minibpm*dim                                                                                                                                               
            badpix = where(apbpm GT 0, nbadpix)   ; label the bad pixels                                                                                                       
                                                                                                                                                                         
      ; FIND VICINITY TO REGIONS OF AVOIDANCE (ie, blobs in the field):                                                                                                                            
         IF (n_elements(blobcoords) NE 0) THEN BEGIN      ; if there are any specified regions to avoid, do the following                                                                                                                     
           xyad, hdr,ap_x, ap_y, ap_ra, ap_dec            ; convert image coordinates into coordnates in sky                                                                                 
           ; find how close the aperture is to any regions we want to avoid:       
              nblobs = n_elements(blobcoords[0,*])     ; number of RAs provided tells us the number of regions (blobs) we want to avoid 
              vicinity = fltarr(nblobs)                ; make an array of distances between aperture center and avoidance regions
              FOR blob=0, nblobs-1 DO BEGIN                                                                                                             
                vicinity[blob] = sqrt(  ( (blobcoords[0,blob] - ap_ra) * cos(blobcoords[1,blob]*!dPI/180.) )^2. + (blobcoords[1,blob] - ap_dec)^2. )       
              ENDFOR    ; all the specified avoidance regions                    
            ; if we're looking in a field that doesn't contain any blobs, it doesn't matter because there's nothing to avoid 
            ; still need a vicinity array though, so:                                        
         ENDIF ELSE vicinity = [3.*ap_radius]   ; make it 1-element and give it a value bigger than what's required for an acceptable aperture      
         ; make a sort of "keyword" to indicate if aperture is within an avoidance region
            tooclose = WHERE(vicinity LE 2.*ap_radius, badlocation)     ; if aperture isn't in any avoidance regions, badlocation will be equal to 0         
        
      ; DETERMINE WHETHER OR NOT THIS APERTURE IS GOOD          
         pixratio = float(nbadpix)/float(ntotalpix)    ; determine what fraction of the aperture is made of bad pixels to report this to user       
         ; Good apertures must meet the following requirements:
         ;  1) have at least some good pixels AND 
         ;  2) not fall into a region to be avoided (ie, near a blob)                              
         IF ((nbadpix LT ntotalpix) AND (badlocation EQ 0)) THEN BEGIN      ; if the aperture meets the requirements, keep it
           print, 'KEEPING aperture ', strcompress(string(ap_count)), ' with bad/total pixel ratio of ', strcompress(string(pixratio))   ; inform user that this is a good aperture 
           repeatflag = 1.    ; end the loop because we've gotten our good aperture                           
         ENDIF ELSE BEGIN     ; if this aperture doesn't meet the requirements, throw it out and make a new aperture                                                    
           ; keep a record of why this aperture was thrown out, just to make sure nothing is going amiss:       
              IF (nbadpix GE ntotalpix) THEN BEGIN     ; if this aperture only has bad pixels, that's the main reason for throwing it out   
                print, 'throw out aperture ', strcompress(string(ap_count)), 'with bad/total pixel ratio of ', strcompress(string(pixratio))   ; note that pixratio should always be 1 in this case
              ENDIF ELSE BEGIN       ; if the aperture had good pixels but was too close to an avoidance region, indicate that                               
                print, 'throw out aperture ', strcompress(string(ap_count)), ' for being too close to ', strcompress(string(badlocation)), ' blobs'
              ENDELSE
           ; since we threw this aperture out, we're going to need to make a new one                                                                        
              ap_count++         ; note that another aperture is being made since this one failed to meet the criteria for a good aperture                                           
              repeatflag = 0.    ; stay in this WHILE loop
         ENDELSE      ; if the aperture didn't meet all requirements and got thrown out      
                                                                                                                                                 
    ENDWHILE      ; while the repeatflag is 0, indicating that we still don't have a good aperture yet          
    ; Once the aperture passes the above WHILE test, it can be used and this procedure is done.         
                                                                                          
  END       ; end of apfinder procedure 









; NOTE: THE FOLLOWING PROCEDURE WAS NOT WRITTEN BY AGNAR. 
;
pro struct_replace_field, struct, tag, data, newtag=newtag
;Change the type, dimensionality, and contents of an existing structure
; field. The tag name may be changed in the process.
;
;Inputs:
; tag (string) Case insensitive tag name describing structure field to
;  modify. Leading and trailing spaces will be ignored. If the field does
;  not exist, the structure is not changed and an error is reported.
; data (any) data that will replace current contents  of 
; [newtag=] (string) new tag name for field being replaced. If not
;  specified, the original tag name will be retained.
;
;Input/Output:
; struct (structure) structure to be modified.
;
;Examples:
;
; Replace sme.wave with the arbitrary contents of wave:
;
;   IDL> struct_replace_field, sme, 'wave', wave
;
; The tag name for a field can be changed without altering the data:
;
;   IDL> struct_replace_field, clients, 'NMAE', clients.nmae, newtag='Name'
;
;History:
; 2003-Jul-20 Valenti  Initial coding

if n_params() lt 3 then begin
  print, 'syntax: struct_replace_field, struct, tag, data [,newtag=]'
  return
endif

;Check that input is a structure.
  if size(struct, /tname) ne 'STRUCT' then begin
    message, 'first argument is not a structure'
  endif

;Get list of structure tags.
  tags = tag_names(struct)
  ntags = n_elements(tags)

;Check that requested field exists in input structure.
  ctag = strupcase(strtrim(tag, 2))		;canoncial form of tag
  itag = where(tags eq ctag, nmatch)
  if nmatch eq 0 then begin
    message, 'structure does not contain ' + ctag + ' field'
    return
  endif
  itag = itag[0]				;convert to scalar

;Choose tag name for the output structure.
  if keyword_set(newtag) then otag = newtag else otag = ctag

;Copy any fields that precede target field. Then add target field.
  if itag eq 0 then begin			;target field occurs first
    new = create_struct(otag, data)
  endif else begin				;other fields before target
    new = create_struct(tags[0], struct.(0))	;initialize structure
    for i=1, itag-1 do begin			;insert leading unchange
      new = create_struct(new, tags[i], struct.(i))
    endfor
    new = create_struct(new, otag, data)	;insert new data
  endelse

;Replicate remainder of structure after desired tag.
  for i=itag+1, ntags-1 do begin
    new = create_struct(new, tags[i], struct.(i))
  endfor

;Replace input structure with new structure.
  struct = new

end